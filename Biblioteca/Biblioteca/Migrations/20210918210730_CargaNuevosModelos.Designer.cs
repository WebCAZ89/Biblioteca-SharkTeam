// <auto-generated />
using System;
using Biblioteca.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Biblioteca.Migrations
{
    [DbContext(typeof(BibliotecaDbContext))]
    [Migration("20210918210730_CargaNuevosModelos")]
    partial class CargaNuevosModelos
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Biblioteca.Models.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LibroId")
                        .HasColumnType("int");

                    b.Property<string>("Nacionalidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LibroId");

                    b.ToTable("Autors");
                });

            modelBuilder.Entity("Biblioteca.Models.Biblioteca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Bibliotecas");
                });

            modelBuilder.Entity("Biblioteca.Models.Copia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BibliotecaId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaPrestamo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BibliotecaId");

                    b.ToTable("Copias");
                });

            modelBuilder.Entity("Biblioteca.Models.Lector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BibliotecaId")
                        .HasColumnType("int");

                    b.Property<string>("Copias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LibrosPrestamo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Multa")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BibliotecaId");

                    b.ToTable("Lectors");
                });

            modelBuilder.Entity("Biblioteca.Models.Libro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ano")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CopiaId")
                        .HasColumnType("int");

                    b.Property<string>("Editorial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CopiaId");

                    b.ToTable("Libros");
                });

            modelBuilder.Entity("Biblioteca.Models.Autor", b =>
                {
                    b.HasOne("Biblioteca.Models.Libro", null)
                        .WithMany("Autor")
                        .HasForeignKey("LibroId");
                });

            modelBuilder.Entity("Biblioteca.Models.Copia", b =>
                {
                    b.HasOne("Biblioteca.Models.Biblioteca", null)
                        .WithMany("Copias")
                        .HasForeignKey("BibliotecaId");
                });

            modelBuilder.Entity("Biblioteca.Models.Lector", b =>
                {
                    b.HasOne("Biblioteca.Models.Biblioteca", null)
                        .WithMany("Lectores")
                        .HasForeignKey("BibliotecaId");
                });

            modelBuilder.Entity("Biblioteca.Models.Libro", b =>
                {
                    b.HasOne("Biblioteca.Models.Copia", null)
                        .WithMany("Libro")
                        .HasForeignKey("CopiaId");
                });
#pragma warning restore 612, 618
        }
    }
}
